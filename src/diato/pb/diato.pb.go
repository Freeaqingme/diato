// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diato.proto

/*
Package diato is a generated protocol buffer package.

It is generated from these files:
	diato.proto

It has these top-level messages:
	UserBackendRequest
	UserBackendResponse
	ConfigContents
*/
package diato

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserBackendRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *UserBackendRequest) Reset()                    { *m = UserBackendRequest{} }
func (m *UserBackendRequest) String() string            { return proto.CompactTextString(m) }
func (*UserBackendRequest) ProtoMessage()               {}
func (*UserBackendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserBackendRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UserBackendResponse struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *UserBackendResponse) Reset()                    { *m = UserBackendResponse{} }
func (m *UserBackendResponse) String() string            { return proto.CompactTextString(m) }
func (*UserBackendResponse) ProtoMessage()               {}
func (*UserBackendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserBackendResponse) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *UserBackendResponse) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ConfigContents struct {
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *ConfigContents) Reset()                    { *m = ConfigContents{} }
func (m *ConfigContents) String() string            { return proto.CompactTextString(m) }
func (*ConfigContents) ProtoMessage()               {}
func (*ConfigContents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigContents) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func init() {
	proto.RegisterType((*UserBackendRequest)(nil), "diato.UserBackendRequest")
	proto.RegisterType((*UserBackendResponse)(nil), "diato.UserBackendResponse")
	proto.RegisterType((*ConfigContents)(nil), "diato.ConfigContents")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserBackend service

type UserBackendClient interface {
	GetServerForUser(ctx context.Context, in *UserBackendRequest, opts ...grpc.CallOption) (*UserBackendResponse, error)
}

type userBackendClient struct {
	cc *grpc.ClientConn
}

func NewUserBackendClient(cc *grpc.ClientConn) UserBackendClient {
	return &userBackendClient{cc}
}

func (c *userBackendClient) GetServerForUser(ctx context.Context, in *UserBackendRequest, opts ...grpc.CallOption) (*UserBackendResponse, error) {
	out := new(UserBackendResponse)
	err := grpc.Invoke(ctx, "/diato.UserBackend/GetServerForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBackend service

type UserBackendServer interface {
	GetServerForUser(context.Context, *UserBackendRequest) (*UserBackendResponse, error)
}

func RegisterUserBackendServer(s *grpc.Server, srv UserBackendServer) {
	s.RegisterService(&_UserBackend_serviceDesc, srv)
}

func _UserBackend_GetServerForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBackendServer).GetServerForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diato.UserBackend/GetServerForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBackendServer).GetServerForUser(ctx, req.(*UserBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diato.UserBackend",
	HandlerType: (*UserBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerForUser",
			Handler:    _UserBackend_GetServerForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diato.proto",
}

// Client API for Server service

type ServerClient interface {
	GetConfigContents(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ConfigContents, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetConfigContents(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ConfigContents, error) {
	out := new(ConfigContents)
	err := grpc.Invoke(ctx, "/diato.Server/GetConfigContents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	GetConfigContents(context.Context, *google_protobuf.Empty) (*ConfigContents, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_GetConfigContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetConfigContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diato.Server/GetConfigContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetConfigContents(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diato.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigContents",
			Handler:    _Server_GetConfigContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diato.proto",
}

func init() { proto.RegisterFile("diato.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x6d, 0x44, 0x83, 0x4e, 0x55, 0x74, 0xc5, 0x52, 0x73, 0x2a, 0x39, 0xe5, 0x20, 0x1b, 0x68,
	0xbf, 0x40, 0xab, 0xf6, 0x20, 0x78, 0x88, 0x78, 0xf1, 0x96, 0xa4, 0xd3, 0x35, 0xd8, 0xec, 0xac,
	0xbb, 0x13, 0xa1, 0x7f, 0x2f, 0xd9, 0x44, 0xb1, 0xda, 0xcb, 0xf2, 0x1e, 0xef, 0xcd, 0xdb, 0x99,
	0x07, 0xc3, 0x65, 0x95, 0x33, 0x49, 0x63, 0x89, 0x49, 0x1c, 0x78, 0x12, 0xcd, 0x54, 0xc5, 0x6f,
	0x4d, 0x21, 0x4b, 0xaa, 0x53, 0x45, 0xeb, 0x5c, 0xab, 0xd4, 0xeb, 0x45, 0xb3, 0x4a, 0x0d, 0x6f,
	0x0c, 0xba, 0x14, 0x6b, 0xc3, 0x9b, 0xee, 0xed, 0x66, 0xe3, 0x04, 0xc4, 0x8b, 0x43, 0x7b, 0x9b,
	0x97, 0xef, 0xa8, 0x97, 0x19, 0x7e, 0x34, 0xe8, 0x58, 0x08, 0xd8, 0xd7, 0x79, 0x8d, 0xe3, 0x60,
	0x12, 0x24, 0x47, 0x99, 0xc7, 0xf1, 0x0d, 0x5c, 0x6c, 0x39, 0x9d, 0x21, 0xed, 0x50, 0x8c, 0x20,
	0x74, 0x68, 0x3f, 0xd1, 0xf6, 0xe6, 0x9e, 0xb5, 0x11, 0x86, 0x2c, 0x8f, 0xf7, 0x26, 0x41, 0x72,
	0x92, 0x79, 0x1c, 0x5f, 0xc3, 0xe9, 0x9c, 0xf4, 0xaa, 0x52, 0x73, 0xd2, 0x8c, 0x9a, 0x9d, 0x88,
	0xe0, 0xb0, 0xec, 0xb1, 0x9f, 0x3f, 0xce, 0x7e, 0xf8, 0xf4, 0x15, 0x86, 0xbf, 0x3e, 0x14, 0x8f,
	0x70, 0xb6, 0x40, 0x7e, 0xf6, 0xe9, 0x0f, 0x64, 0x5b, 0x49, 0x5c, 0xc9, 0xae, 0x87, 0xff, 0x27,
	0x44, 0xd1, 0x2e, 0xa9, 0xdb, 0x39, 0x1e, 0x4c, 0x9f, 0x20, 0xec, 0x92, 0xc4, 0x1d, 0x9c, 0x2f,
	0x90, 0xff, 0xac, 0x35, 0x92, 0x8a, 0x48, 0xad, 0x51, 0x7e, 0x17, 0x28, 0xef, 0xdb, 0xce, 0xa2,
	0xcb, 0x3e, 0x74, 0xdb, 0x1e, 0x0f, 0x8a, 0xd0, 0x1b, 0x67, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x19, 0x21, 0x5b, 0xb1, 0x98, 0x01, 0x00, 0x00,
}
