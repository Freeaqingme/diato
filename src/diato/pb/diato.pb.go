// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diato.proto

/*
Package diato is a generated protocol buffer package.

It is generated from these files:
	diato.proto

It has these top-level messages:
	UserBackendRequest
	UserBackendResponse
*/
package diato

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserBackendRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *UserBackendRequest) Reset()                    { *m = UserBackendRequest{} }
func (m *UserBackendRequest) String() string            { return proto.CompactTextString(m) }
func (*UserBackendRequest) ProtoMessage()               {}
func (*UserBackendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserBackendRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UserBackendResponse struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *UserBackendResponse) Reset()                    { *m = UserBackendResponse{} }
func (m *UserBackendResponse) String() string            { return proto.CompactTextString(m) }
func (*UserBackendResponse) ProtoMessage()               {}
func (*UserBackendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserBackendResponse) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *UserBackendResponse) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*UserBackendRequest)(nil), "diato.UserBackendRequest")
	proto.RegisterType((*UserBackendResponse)(nil), "diato.UserBackendResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserBackend service

type UserBackendClient interface {
	GetServerForUser(ctx context.Context, in *UserBackendRequest, opts ...grpc.CallOption) (*UserBackendResponse, error)
}

type userBackendClient struct {
	cc *grpc.ClientConn
}

func NewUserBackendClient(cc *grpc.ClientConn) UserBackendClient {
	return &userBackendClient{cc}
}

func (c *userBackendClient) GetServerForUser(ctx context.Context, in *UserBackendRequest, opts ...grpc.CallOption) (*UserBackendResponse, error) {
	out := new(UserBackendResponse)
	err := grpc.Invoke(ctx, "/diato.UserBackend/GetServerForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserBackend service

type UserBackendServer interface {
	GetServerForUser(context.Context, *UserBackendRequest) (*UserBackendResponse, error)
}

func RegisterUserBackendServer(s *grpc.Server, srv UserBackendServer) {
	s.RegisterService(&_UserBackend_serviceDesc, srv)
}

func _UserBackend_GetServerForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserBackendServer).GetServerForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diato.UserBackend/GetServerForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserBackendServer).GetServerForUser(ctx, req.(*UserBackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diato.UserBackend",
	HandlerType: (*UserBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerForUser",
			Handler:    _UserBackend_GetServerForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diato.proto",
}

func init() { proto.RegisterFile("diato.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xc9, 0x4c, 0x2c,
	0xc9, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x34, 0xb8, 0x84, 0x42,
	0x8b, 0x53, 0x8b, 0x9c, 0x12, 0x93, 0xb3, 0x53, 0xf3, 0x52, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x25, 0x47, 0x2e, 0x61, 0x14, 0x95, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x62,
	0x5c, 0x6c, 0xc5, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x50, 0xc5, 0x50, 0x1e, 0xc8, 0x88, 0x82, 0xfc,
	0xa2, 0x12, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x30, 0xdb, 0x28, 0x8a, 0x8b, 0x1b, 0xc9,
	0x08, 0x21, 0x6f, 0x2e, 0x01, 0xf7, 0xd4, 0x92, 0x60, 0xb0, 0x7a, 0xb7, 0xfc, 0x22, 0x90, 0x94,
	0x90, 0xa4, 0x1e, 0xc4, 0x91, 0x98, 0x8e, 0x92, 0x92, 0xc2, 0x26, 0x05, 0x71, 0x85, 0x12, 0x43,
	0x12, 0x1b, 0xd8, 0x5b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xf8, 0xda, 0xe0, 0xe5,
	0x00, 0x00, 0x00,
}
